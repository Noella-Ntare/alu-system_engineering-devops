#!/usr/bin/env bash
# Script to install and configure HAProxy as a load balancer for web-01 and web-02

set -e  # Exit script on any error
set -o pipefail  # Ensure failures in piped commands are detected

# Ensure script is run as root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root. Use sudo."
    exit 1
fi

# Update system and install required packages
echo "Updating system and installing HAProxy..."
apt-get update -y
apt-get install -y haproxy curl net-tools ufw

# Enable HAProxy
echo "Enabling HAProxy..."
echo "ENABLED=1" | sudo tee /etc/default/haproxy

# Backup existing HAProxy config
cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak

# Get hostname prefix (student ID)
STUDENT_ID=$(hostname | cut -d '-' -f1)

# Configure HAProxy
cat > /etc/haproxy/haproxy.cfg << EOF
global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    log global
    mode http
    option httplog
    option dontlognull
    timeout connect 5000
    timeout client 50000
    timeout server 50000

frontend http_front
    bind *:80
    default_backend http_back

backend http_back
    balance roundrobin
    server ${STUDENT_ID}-web-01 3.89.108.224:80 check
    server ${STUDENT_ID}-web-02 54.152.78.172:80 check
EOF

# Restart and enable HAProxy service
echo "Restarting and enabling HAProxy..."
systemctl restart haproxy
systemctl enable haproxy

# Configure firewall rules
echo "Configuring firewall..."
ufw allow OpenSSH
ufw allow 80/tcp
ufw --force enable

# Verify HAProxy status
if systemctl status haproxy --no-pager | grep -q "active (running)"; then
    echo "HAProxy is running successfully."
else
    echo "HAProxy failed to start. Check logs with: journalctl -u haproxy --no-pager"
    exit 1
fi

# Print final configuration info
echo "HAProxy successfully configured with servers: ${STUDENT_ID}-web-01 and ${STUDENT_ID}-web-02"

